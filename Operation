local ReplicatedStorage = game:GetService('ReplicatedStorage')
local VirtualInputManager = game:GetService('VirtualInputManager')
local UserInputService = game:GetService('UserInputService')
local RunService = game:GetService('RunService')
local Workspace = game:GetService('Workspace')
local Players = game:GetService('Players')

local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild('HumanoidRootPart')
local Humanoid = Character.Humanoid

local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/Zyai-Lua/Inertia.mov/refs/heads/main/Linoria'))()
local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Zyai-Lua/Inertia.mov/refs/heads/main/LinoriaTheme'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
local FrameCounter, FrameTimer, FPS,StartTime = 0,0,60, tick()

local Window = Library:CreateWindow({

	Title = 'ESP',
	Center = true,
	AutoShow = true,
	TabPadding = 8,
	MenuFadeTime = 0.2
})

local Tabs = {
	Combat = Window:AddTab('Combat'),
    Visuals = Window:AddTab('Visuals'),
	['UI Settings'] = Window:AddTab('UI Settings'),
}

local PlayerVisuals = Tabs.Visuals:AddLeftGroupbox('Player ESP')

PlayerVisuals:AddToggle('ESP', {Text = 'Enabled',Default = false,Tooltip = 'Enables ESP',})
PlayerVisuals:AddToggle('Boxes', {Text = 'Boxes',Default = false,Tooltip = 'Enables Boxes',}):AddColorPicker('Boxes_Color', {Default = Color3.fromRGB(255, 255, 255),Title = 'Color',Transparency = 0,})
PlayerVisuals:AddToggle('Names', {Text = 'Names',Default = false,Tooltip = 'Enables Names',})
PlayerVisuals:AddToggle('HealthBar', {Text = 'Health Bar',Default = false,Tooltip = 'Enables Health Bars',}):AddColorPicker('Health_High', {Default = Color3.fromRGB(0, 255, 0),Title = 'Color',Transparency = 0,}):AddColorPicker('Health_Low', {Default = Color3.fromRGB(255, 0, 0),Title = 'Color',Transparency = 0,})
PlayerVisuals:AddToggle('Weapon', {Text = 'Weapon',Default = false,Tooltip = 'Enables Weapons',})
PlayerVisuals:AddToggle('Distance', {Text = 'Distance',Default = false,Tooltip = 'Enables Distances',})
PlayerVisuals:AddToggle('Skeleton', {Text = 'Skeleton', Default = false, Tooltip = 'Draws skeleton bones'})
PlayerVisuals:AddToggle('HeadCircle', {Text = 'Head Circle', Default = false, Tooltip = 'Draws Circle Around Head'})

local SilentAim = Tabs.Combat:AddLeftGroupbox('Silent Aim')

SilentAim:AddToggle('Silent', {Text = 'Enabled',Default = false,Tooltip = 'Enables Silent Aim',})
SilentAim:AddToggle('Team_Check', {Text = 'Team Check',Default = false,Tooltip = 'Enables Team Check',})
SilentAim:AddToggle('ShowFOV', {Text = 'Show FOV',Default = false,Tooltip = 'Enables FOV Circle On Screen',}):AddColorPicker('FOV_Color', {Default = Color3.fromRGB(255, 255, 255),Title = 'Color',Transparency = 0,})
SilentAim:AddSlider('Hit_Chance', {Text = 'Hit Chance',Default = 100,Min = 1,Max = 100,Rounding = 1,Compact = false,})
SilentAim:AddSlider('FOV_Size', {Text = 'Size',Default = 100,Min = 1,Max = 1000,Rounding = 1,Compact = false,})
SilentAim:AddDropdown('Targetr', {Values = { 'Head','HumanoidRootPart'},Default = 1,Multi = false,Text = 'Target Part',})

local GunMods = Tabs.Combat:AddRightGroupbox('Gun Mods')

GunMods:AddToggle('NoRecoil', {Text = 'No Recoil',Default = false,Tooltip = '',Callback = function(val)
    if val then
        for _, obj in ipairs(getgc(true)) do
            if typeof(obj) == "table" then
                for key, value in pairs(obj) do
                    if typeof(key) == "string" and key:lower():find("recoil") and typeof(value) == "number" then
                        obj[key] = 0.000001
                    end
                end
            end
        end
    else
        for _, obj in ipairs(getgc(true)) do
            if typeof(obj) == "table" then
                for key, value in pairs(obj) do
                    if typeof(key) == "string" and key:lower():find("recoil") and typeof(value) == "number" then
                        obj[key] = 0.5
                    end
                end
            end
        end
    end
end})

GunMods:AddToggle('NoSpread', {Text = 'No Spread',Default = false,Tooltip = '',Callback = function(val)
    if val then
        for _, obj in ipairs(getgc(true)) do
            if typeof(obj) == "table" then
                for key, value in pairs(obj) do
                    if typeof(key) == "string" and key:lower():find("spread") and typeof(value) == "number" then
                        obj[key] = 0.000001
                    end
                end
            end
        end
    else
        for _, obj in ipairs(getgc(true)) do
            if typeof(obj) == "table" then
                for key, value in pairs(obj) do
                    if typeof(key) == "string" and key:lower():find("spread") and typeof(value) == "number" then
                        obj[key] = 60
                    end
                end
            end
        end
    end
end})


local function ESP(model)
    local Connection;
    local Drawings = {
        box = Drawing.new("Square"),
        boxOutline = Drawing.new("Square"),
        name = Drawing.new("Text"),
        health = Drawing.new("Line"),
        healthOutline = Drawing.new("Line"),
        weapon = Drawing.new("Text"),
        distance = Drawing.new("Text"),
        head = Drawing.new("Circle"),
        headOutline = Drawing.new("Circle"),
        skeleton = {},
        skeletonOutline = {}
    }

    
    for i = 1, 15 do
        local line = Drawing.new("Line")
        line.Color = Color3.fromRGB(255, 255, 255)
        line.Thickness = 1
        line.Visible = false
        line.ZIndex = 2
        table.insert(Drawings.skeleton, line)

        local line = Drawing.new("Line")
        line.Color = Color3.fromRGB(0, 0, 0)
        line.Thickness = 1.5
        line.Visible = false
        table.insert(Drawings.skeletonOutline, line)
    end

    local function Remove()
        if Connection then Connection:Disconnect() end
        for _, drawing in pairs(Drawings) do
            if typeof(drawing) == "table" then
                for _, v in ipairs(drawing) do
                    v:Remove()
                end
            else
                drawing:Remove()
            end
        end
    end
    model.Destroying:Connect(Remove)

    local bones = {
        {"Head", "UpperTorso"},
        {"UpperTorso", "LowerTorso"},
        {"LowerTorso", "LeftUpperLeg"},
        {"LowerTorso", "RightUpperLeg"},
        {"LeftUpperLeg", "LeftLowerLeg"},
        {"RightUpperLeg", "RightLowerLeg"},
        {"LeftLowerLeg", "LeftFoot"},
        {"RightLowerLeg", "RightFoot"},
        {"UpperTorso", "LeftUpperArm"},
        {"UpperTorso", "RightUpperArm"},
        {"LeftUpperArm", "LeftLowerArm"},
        {"RightUpperArm", "RightLowerArm"},
        {"LeftLowerArm", "LeftHand"},
        {"RightLowerArm", "RightHand"},
    }

    local update = function()
        Connection = RunService.Heartbeat:Connect(function()
            local Character = model and model.Character
            if Character then
                local RootPart = Character:FindFirstChild("HumanoidRootPart")
                local Humanoid = Character:FindFirstChild("Humanoid")
                local Head = Character:FindFirstChild("Head")

                if RootPart and Humanoid and Head and model.Team ~= LocalPlayer.Team then
                    local Position, Visible = Camera:WorldToViewportPoint(RootPart.Position)
                    local hPosition, Visible = Camera:WorldToViewportPoint(Head.Position)
                    local weapon = Character:FindFirstChildWhichIsA("Tool") or { Name = "none" }

                    if Visible and Toggles.ESP.Value and Humanoid.Health > 0  then
                        local scale = 1 / (Position.Z * math.tan(math.rad(Camera.FieldOfView * 0.5)) * 2) * 1000
                        local width, height = math.floor(4.5 * scale), math.floor(6 * scale)
                        local x, y = math.floor(Position.X), math.floor(Position.Y)
                        local xPosition, yPosition = math.floor(x - width * 0.5), math.floor((y - height * 0.5) + (0.5 * scale))

                        local hx, hy = math.floor(hPosition.X), math.floor(hPosition.Y)
                        local hxPosition, hyPosition = math.floor(hx - width * 0.5), math.floor((hy - height * 0.5) + (0.5 * scale))

                        local distance = (HumanoidRootPart.Position - RootPart.Position).Magnitude

                        -- Circle
                        Drawings.head.Color = Color3.fromRGB(255, 255, 255)
                        Drawings.head.Radius = scale - 1
                        Drawings.head.ZIndex = 2
                        Drawings.head.Thickness = 1
                        Drawings.head.Position = Vector2.new(hx, hy)
                        Drawings.head.Visible = Toggles.HeadCircle.Value

                        Drawings.headOutline.Color = Color3.fromRGB(0, 0, 0)
                        Drawings.headOutline.Radius = scale - 1
                        Drawings.headOutline.ZIndex = 1
                        Drawings.headOutline.Thickness = 1.5
                        Drawings.headOutline.Position = Vector2.new(hx, hy)
                        Drawings.headOutline.Visible = Toggles.HeadCircle.Value

                        -- Box
                        Drawings.box.Size = Vector2.new(width, height)
                        Drawings.box.Position = Vector2.new(xPosition, yPosition)
                        Drawings.box.Color = Options.Boxes_Color.Value
                        Drawings.box.Thickness = 1
                        Drawings.box.Visible = Toggles.Boxes.Value
                        Drawings.box.ZIndex = 2

                        Drawings.boxOutline.Size = Drawings.box.Size
                        Drawings.boxOutline.Position = Drawings.box.Position
                        Drawings.boxOutline.Color = Color3.fromRGB(0, 0, 0)
                        Drawings.boxOutline.Thickness = 3
                        Drawings.boxOutline.Visible = Toggles.Boxes.Value

                        -- Name
                        Drawings.name.Text = model.Name
                        Drawings.name.Size = math.clamp(math.abs(12.5 * scale), 10, 12.5)
                        Drawings.name.Position = Vector2.new(x, (yPosition - Drawings.name.TextBounds.Y) - 2)
                        Drawings.name.Color = Color3.fromRGB(255, 255, 255)
                        Drawings.name.Outline = true
                        Drawings.name.OutlineColor = Color3.fromRGB(0, 0, 0)
                        Drawings.name.Visible = Toggles.Names.Value
                        Drawings.name.Center = true

                        -- Health
                        local healthPercent = 100 / (Humanoid.MaxHealth / Humanoid.Health)

                        Drawings.healthOutline.From = Vector2.new(xPosition - 8, yPosition)
                        Drawings.healthOutline.To = Vector2.new(xPosition - 8, yPosition + height)
                        Drawings.healthOutline.Color = Color3.fromRGB(0, 0, 0)
                        Drawings.healthOutline.Thickness = 3
                        Drawings.healthOutline.Visible = Toggles.HealthBar.Value
                        Drawings.health.ZIndex = 2

                        Drawings.health.From = Vector2.new(xPosition - 8, (yPosition + height) - 1)
                        Drawings.health.To = Vector2.new(xPosition - 8, ((Drawings.health.From.Y - ((height / 100) * healthPercent))) + 2)
                        Drawings.health.Color = Options.Health_Low.Value:Lerp(Options.Health_High.Value, healthPercent * 0.01)
                        Drawings.health.Visible = Toggles.HealthBar.Value
                        

                        -- Weapon
                        Drawings.weapon.Text = weapon.Name
                        Drawings.weapon.Size = math.clamp(math.abs(11 * scale), 10, 11)
                        Drawings.weapon.Position = Vector2.new(x, (yPosition + height) + (Drawings.weapon.TextBounds.Y * 0.25))
                        Drawings.weapon.Color = Color3.fromRGB(255, 255, 255)
                        Drawings.weapon.Outline = true
                        Drawings.weapon.OutlineColor = Color3.fromRGB(0, 0, 0)
                        Drawings.weapon.Center = true
                        Drawings.weapon.Visible = Toggles.Weapon.Value

                        -- Distance
                        Drawings.distance.Text = math.floor(distance) .. "(s)"
                        Drawings.distance.Size = math.clamp(math.abs(11 * scale), 10, 11)
                        Drawings.distance.Position = Vector2.new(x, (yPosition + height + 10) + (Drawings.distance.TextBounds.Y * 0.25))
                        Drawings.distance.Color = Color3.fromRGB(255, 255, 255)
                        Drawings.distance.Outline = true
                        Drawings.distance.OutlineColor = Color3.fromRGB(0, 0, 0)
                        Drawings.distance.Center = true
                        Drawings.distance.Visible = Toggles.Distance.Value

                        -- Skeleton
                        if Toggles.Skeleton and Toggles.Skeleton.Value then
                            local index = 1
                            for _, bonePair in ipairs(bones) do
                                local part0 = Character:FindFirstChild(bonePair[1])
                                local part1 = Character:FindFirstChild(bonePair[2])
                                local line = Drawings.skeleton[index]
                                local line2 = Drawings.skeletonOutline[index]

                                if part0 and part1 then
                                    local p0, visible0 = Camera:WorldToViewportPoint(part0.Position)
                                    local p1, visible1 = Camera:WorldToViewportPoint(part1.Position)

                                    if visible0 and visible1 then
                                        line.From = Vector2.new(p0.X, p0.Y)
                                        line.To = Vector2.new(p1.X, p1.Y)
                                        line.Visible = true

                                        line2.From = Vector2.new(p0.X, p0.Y)
                                        line2.To = Vector2.new(p1.X, p1.Y)
                                        line2.Visible = true
                                    else
                                        line.Visible = false
                                        line2.Visible = false
                                    end
                                else
                                    line.Visible = false
                                    line2.Visible = false
                                end

                                index += 1
                            end
                        else
                            for _, line in ipairs(Drawings.skeleton) do
                                line.Visible = false
                            end

                            for _, line in ipairs(Drawings.skeletonOutline) do
                                line.Visible = false
                            end
                        end
                    else
                        for _, v in pairs(Drawings) do
                            if typeof(v) == "table" then
                                for _, line in ipairs(v) do line.Visible = false end
                            else
                                v.Visible = false
                            end
                        end
                    end
                end
            else
                for _, v in pairs(Drawings) do
                    if typeof(v) == "table" then
                        for _, line in ipairs(v) do line.Visible = false end
                    else
                        v.Visible = false
                    end
                end
            end
        end)
    end

    coroutine.wrap(update)()
end


do
	for _, v in pairs(Players:GetPlayers()) do
		if v.Name ~= Players.LocalPlayer.Name then
			coroutine.wrap(ESP)(v)
		end      
	end
	Players.PlayerAdded:Connect(function(v)
		task.delay(1, function()
			coroutine.wrap(ESP)(v)
		end)
	end) 
end 



local GameFramework = getsenv(game:GetService("Players").LocalPlayer.PlayerGui.SE_Framework)

local function GetClosestTarget()
    local closestPlayer = nil
    local shortestDistance = math.huge

    local mouseLocation = Vector2.new(LocalPlayer:GetMouse().X, LocalPlayer:GetMouse().Y)
    local localTeam = LocalPlayer.Team

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Team ~= localTeam then
            local character = player.Character
            if character then
                local hrp = character:FindFirstChild("HumanoidRootPart")
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if hrp and humanoid and humanoid.Health > 0 then
                    local screenPos, onScreen = Camera:WorldToViewportPoint(hrp.Position)
                    if onScreen then
                        local screenVector = Vector2.new(screenPos.X, screenPos.Y)
                        local distance = (screenVector - mouseLocation).Magnitude
                        if distance < shortestDistance and distance < Options.FOV_Size.Value then
                            shortestDistance = distance
                            closestPlayer = player
                        end
                    end
                end
            end
        end
    end

    return closestPlayer
end


local SilentFOV = Drawing.new("Circle")
SilentFOV.Radius = Options.FOV_Size.Value
SilentFOV.Visible = false
SilentFOV.Thickness = 1.5
SilentFOV.ZIndex = 2
SilentFOV.Color = Options.FOV_Color.Value

local SilentFOVOutline = Drawing.new("Circle")
SilentFOVOutline.Radius =  Options.FOV_Size.Value
SilentFOVOutline.Visible = false
SilentFOVOutline.Thickness = 2
SilentFOVOutline.ZIndex = 1
SilentFOVOutline.Color = Color3.fromRGB(0,0,0)

local OldBullet = GameFramework.BulletRaycast
GameFramework.BulletRaycast = function(...)
    local Args = {...}
    local ClosestTarget = GetClosestTarget()
    local character = ClosestTarget and ClosestTarget.Character
    local targetPart = character and character:FindFirstChild(Options.Targetr.Value)
    local hrp = character and character:FindFirstChild("HumanoidRootPart")

    if targetPart and hrp then
        Args[2] = (targetPart.Position - Args[1]).Unit * 1024
    end
    return OldBullet(unpack(Args))
end;


RunService.Heartbeat:Connect(function()
    if Toggles.Silent.Value and Toggles.ShowFOV.Value then
        SilentFOV.Visible = true
        SilentFOVOutline.Visible = true

        SilentFOV.Radius = Options.FOV_Size.Value
        SilentFOVOutline.Radius = Options.FOV_Size.Value

        SilentFOV.Position = UserInputService:GetMouseLocation()
        SilentFOVOutline.Position = UserInputService:GetMouseLocation()
        SilentFOV.Color = Options.FOV_Color.Value
    else
        SilentFOV.Visible = false
        SilentFOVOutline.Visible = false
    end
end)



do -- Final Loading

	Library:SetWatermarkVisibility(true)
	Connection = RunService.RenderStepped:Connect(function()
		FrameCounter += 1 

		if (tick() - FrameTimer) >= 1 then
			FPS = FrameCounter 
			FrameTimer = tick() 
			FrameCounter = 0 
		end 

		Library:SetWatermark(('inertia | %s fps | %s ms'):format(math.floor(FPS),math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue()))) 
	end) 

	Library.KeybindFrame.Visible = true 

	Library:OnUnload(function()
		Library.Unloaded = true
	end)

	local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
	MenuGroup:AddButton('Unload', function() Library:Unload() end)

	MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })

	Library.ToggleKeybind = Options.MenuKeybind

	ThemeManager:SetLibrary(Library)
	SaveManager:SetLibrary(Library)
	SaveManager:IgnoreThemeSettings()
	SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
	ThemeManager:SetFolder('Inertia')
	SaveManager:SetFolder('Inertia/Project Delta')
	SaveManager:BuildConfigSection(Tabs['UI Settings'])
	ThemeManager:ApplyToTab(Tabs['UI Settings'])
	SaveManager:LoadAutoloadConfig()



	local TimeToLoad = math.abs(StartTime - tick())
	Library:Notify("Inertia: Took "..TimeToLoad.."s To Load",5)
end
